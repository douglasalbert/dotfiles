#!/bin/bash
# vim: set filetype=sh :

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
        export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
        export TERM='xterm-256color';
fi;

prompt_git() {
        local s='';
        local branchName='';

        # Check if the current directory is in a Git repository.
        if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

                # check if the current directory is in .git before running git checks
                if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

                        if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
                                git update-index --really-refresh -q &> /dev/null;
                        fi;

                        # Check for uncommitted changes in the index.
                        if ! git diff --quiet --ignore-submodules --cached; then
                                s+='+';
                        fi;

                        # Check for unstaged changes.
                        if ! git diff-files --quiet --ignore-submodules --; then
                                s+='!';
                        fi;

                        # Check for untracked files.
                        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                                s+='?';
                        fi;

                        # Check for stashed files.
                        if git rev-parse --verify refs/stash &>/dev/null; then
                                s+='$';
                        fi;

                fi;

                # Get the short symbolic ref.
                # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
                # Otherwise, just give up.
                branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                        git rev-parse --short HEAD 2> /dev/null || \
                        echo '(unknown)')";

                [ -n "${s}" ] && s=" [${s}]";

                echo -e "(${1}${branchName}${s}) ";
        else
                return;
        fi;
}

cloud=""
if [[ -f /proc/cpuinfo ]] && grep -q "^flags.* hypervisor" /proc/cpuinfo && [[ ! -d "/mnt/c/Windows/" ]]; then
        cloud="☁️ "
fi

# Build prompt
PS1="[\\u" #username
if [[ "${SSH_TTY}" ]]; then
    PS1+="@${cloud}\h "; # show hostname
else
    PS1+=" "; # hide hostname for local
fi;

PS1+="\W";
PS1+="] "; # end host & user info
PS1+="\$(prompt_git)"; # git information
PS1+="\$ \\[${reset}\\]"; #  `$`
export PS1;

# loud warning for aws connections
if [ -n "${AWS_VAULT}" ]; then
    echo -e "$(tput setab 1)In aws-vault env ${AWS_VAULT}$(tput sgr0)"
    export PS1="$(tput setab 1)<<${AWS_VAULT}>>$(tput sgr0) ${PS1}";
fi;
